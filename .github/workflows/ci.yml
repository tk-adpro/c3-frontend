name: CI

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  POSTGRES_DB: ${{ secrets.NAMA_DATABASE }}
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: mypassword
  REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  IMAGE_TAG: latest
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  GCP_USERNAME: ${{ secrets.GCP_USERNAME }}
  GCP_STATIC_IP: ${{ secrets.GCP_STATIC_IP }}

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Gradle
        run: |
          chmod +x ./gradlew
          export GRADLE_USER_HOME=${{ github.workspace }}/.gradle

      - name: Build with Gradle
        run: |
          ./gradlew assemble

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: build/libs/*.jar

          
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: jar

      - name: check directory
        run: ls -al

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin

      - name: Set Docker BuildKit
        run: export DOCKER_BUILDKIT=1

      - name: Build and push Docker image
        run: |
          docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME -t ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
          docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: create ssh key
        run: echo "${{ secrets.SSH_KEY }}" > ssh-key.pem && cat ssh-key.pem

      - name: update permission
        run: chmod 400 ssh-key.pem

      - name: Deploy to GCP
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_STATIC_IP }} "
            echo 'Updating deployment...' &&
            kubectl set image deployments/c3-frontend c3-frontend=docker.io/${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}  || true && 
            echo 'Deployment complete.' &&
            exit"